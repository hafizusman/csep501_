Warning : Terminal "STATIC" was declared but never used
Warning : Terminal "CLASS" was declared but never used
Warning : Terminal "MAIN" was declared but never used
Warning : Terminal "STRING_TYPE" was declared but never used
Warning : Terminal "VOID" was declared but never used
Warning : Terminal "EXTENDS" was declared but never used
Warning : *** Production "VariableDeclaration ::= Type Identifier SEMICOLON " never reduced
Warning : *** Production "VariableDeclarationList ::= VariableDeclaration VariableDeclarationList " never reduced
Warning : *** Production "VariableDeclarationList ::= " never reduced
===== Terminals =====
[0]EOF [1]error [2]DISPLAY [3]CLASS [4]PUBLIC 
[5]STATIC [6]VOID [7]NEW [8]RETURN [9]THIS 
[10]IF [11]ELSE [12]TRUE [13]FALSE [14]WHILE 
[15]EXTENDS [16]MAIN [17]LENGTH [18]MULTIPLY [19]PLUS 
[20]MINUS [21]LESSTHAN [22]LOGICAL_AND [23]LOGICAL_NOT [24]BECOMES 
[25]LPAREN [26]RPAREN [27]LBRACKET [28]RBRACKET [29]LCURLY 
[30]RCURLY [31]SEMICOLON [32]DOT [33]COMMA [34]INTEGER_TYPE 
[35]BOOLEAN_TYPE [36]STRING_TYPE [37]IDENTIFIER [38]INTEGER_LITERAL 

===== Non terminals =====
[0]Program [1]Statement [2]BlockStatements [3]Expression [4]ExpressionList 
[5]Identifier [6]FormalDeclaration [7]FormalDeclarationList [8]VariableDeclaration [9]VariableDeclarationList 
[10]Type [11]MethodDeclaration 

===== Productions =====
[0] Program ::= MethodDeclaration 
[1] $START ::= Program EOF 
[2] Type ::= INTEGER_TYPE LBRACKET RBRACKET 
[3] Type ::= BOOLEAN_TYPE 
[4] Type ::= INTEGER_TYPE 
[5] Type ::= IDENTIFIER 
[6] MethodDeclaration ::= PUBLIC Type Identifier LPAREN FormalDeclarationList RPAREN LCURLY BlockStatements RETURN Expression SEMICOLON RCURLY 
[7] FormalDeclarationList ::= 
[8] FormalDeclarationList ::= FormalDeclaration 
[9] FormalDeclarationList ::= FormalDeclaration COMMA FormalDeclarationList 
[10] FormalDeclaration ::= Type Identifier 
[11] VariableDeclarationList ::= 
[12] VariableDeclarationList ::= VariableDeclaration VariableDeclarationList 
[13] VariableDeclaration ::= Type Identifier SEMICOLON 
[14] Identifier ::= IDENTIFIER 
[15] Statement ::= LCURLY RCURLY 
[16] Statement ::= LCURLY BlockStatements RCURLY 
[17] Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
[18] Statement ::= WHILE LPAREN Expression RPAREN Statement 
[19] Statement ::= DISPLAY LPAREN Expression RPAREN SEMICOLON 
[20] Statement ::= Identifier BECOMES Expression SEMICOLON 
[21] Statement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON 
[22] BlockStatements ::= Statement 
[23] BlockStatements ::= Statement BlockStatements 
[24] Expression ::= Expression LOGICAL_AND Expression 
[25] Expression ::= Expression LESSTHAN Expression 
[26] Expression ::= Expression PLUS Expression 
[27] Expression ::= Expression MINUS Expression 
[28] Expression ::= Expression MULTIPLY Expression 
[29] Expression ::= Expression LBRACKET Expression RBRACKET 
[30] Expression ::= Expression DOT LENGTH 
[31] Expression ::= Expression DOT Identifier LPAREN ExpressionList RPAREN 
[32] Expression ::= INTEGER_LITERAL 
[33] Expression ::= TRUE 
[34] Expression ::= FALSE 
[35] Expression ::= IDENTIFIER 
[36] Expression ::= THIS 
[37] Expression ::= NEW INTEGER_TYPE LBRACKET Expression RBRACKET 
[38] Expression ::= NEW Identifier LPAREN RPAREN 
[39] Expression ::= LOGICAL_NOT Expression 
[40] Expression ::= LPAREN Expression RPAREN 
[41] ExpressionList ::= 
[42] ExpressionList ::= Expression 
[43] ExpressionList ::= Expression COMMA ExpressionList 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [$START ::= (*) Program EOF , {EOF }]
  [MethodDeclaration ::= (*) PUBLIC Type Identifier LPAREN FormalDeclarationList RPAREN LCURLY BlockStatements RETURN Expression SEMICOLON RCURLY , {EOF }]
  [Program ::= (*) MethodDeclaration , {EOF }]
}
transition on PUBLIC to state [3]
transition on MethodDeclaration to state [2]
transition on Program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= Program (*) EOF , {EOF }]
}
transition on EOF to state [99]

-------------------
lalr_state [2]: {
  [Program ::= MethodDeclaration (*) , {EOF }]
}

-------------------
lalr_state [3]: {
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INTEGER_TYPE LBRACKET RBRACKET , {IDENTIFIER }]
  [Type ::= (*) INTEGER_TYPE , {IDENTIFIER }]
  [MethodDeclaration ::= PUBLIC (*) Type Identifier LPAREN FormalDeclarationList RPAREN LCURLY BlockStatements RETURN Expression SEMICOLON RCURLY , {EOF }]
  [Type ::= (*) BOOLEAN_TYPE , {IDENTIFIER }]
}
transition on BOOLEAN_TYPE to state [7]
transition on IDENTIFIER to state [6]
transition on INTEGER_TYPE to state [5]
transition on Type to state [4]

-------------------
lalr_state [4]: {
  [MethodDeclaration ::= PUBLIC Type (*) Identifier LPAREN FormalDeclarationList RPAREN LCURLY BlockStatements RETURN Expression SEMICOLON RCURLY , {EOF }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
}
transition on Identifier to state [11]
transition on IDENTIFIER to state [10]

-------------------
lalr_state [5]: {
  [Type ::= INTEGER_TYPE (*) LBRACKET RBRACKET , {IDENTIFIER }]
  [Type ::= INTEGER_TYPE (*) , {IDENTIFIER }]
}
transition on LBRACKET to state [8]

-------------------
lalr_state [6]: {
  [Type ::= IDENTIFIER (*) , {IDENTIFIER }]
}

-------------------
lalr_state [7]: {
  [Type ::= BOOLEAN_TYPE (*) , {IDENTIFIER }]
}

-------------------
lalr_state [8]: {
  [Type ::= INTEGER_TYPE LBRACKET (*) RBRACKET , {IDENTIFIER }]
}
transition on RBRACKET to state [9]

-------------------
lalr_state [9]: {
  [Type ::= INTEGER_TYPE LBRACKET RBRACKET (*) , {IDENTIFIER }]
}

-------------------
lalr_state [10]: {
  [Identifier ::= IDENTIFIER (*) , {BECOMES LPAREN RPAREN LBRACKET COMMA }]
}

-------------------
lalr_state [11]: {
  [MethodDeclaration ::= PUBLIC Type Identifier (*) LPAREN FormalDeclarationList RPAREN LCURLY BlockStatements RETURN Expression SEMICOLON RCURLY , {EOF }]
}
transition on LPAREN to state [12]

-------------------
lalr_state [12]: {
  [FormalDeclarationList ::= (*) FormalDeclaration , {RPAREN }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INTEGER_TYPE LBRACKET RBRACKET , {IDENTIFIER }]
  [FormalDeclaration ::= (*) Type Identifier , {RPAREN COMMA }]
  [FormalDeclarationList ::= (*) , {RPAREN }]
  [Type ::= (*) INTEGER_TYPE , {IDENTIFIER }]
  [MethodDeclaration ::= PUBLIC Type Identifier LPAREN (*) FormalDeclarationList RPAREN LCURLY BlockStatements RETURN Expression SEMICOLON RCURLY , {EOF }]
  [FormalDeclarationList ::= (*) FormalDeclaration COMMA FormalDeclarationList , {RPAREN }]
  [Type ::= (*) BOOLEAN_TYPE , {IDENTIFIER }]
}
transition on BOOLEAN_TYPE to state [7]
transition on IDENTIFIER to state [6]
transition on INTEGER_TYPE to state [5]
transition on FormalDeclarationList to state [15]
transition on Type to state [14]
transition on FormalDeclaration to state [13]

-------------------
lalr_state [13]: {
  [FormalDeclarationList ::= FormalDeclaration (*) COMMA FormalDeclarationList , {RPAREN }]
  [FormalDeclarationList ::= FormalDeclaration (*) , {RPAREN }]
}
transition on COMMA to state [97]

-------------------
lalr_state [14]: {
  [FormalDeclaration ::= Type (*) Identifier , {RPAREN COMMA }]
  [Identifier ::= (*) IDENTIFIER , {RPAREN COMMA }]
}
transition on Identifier to state [96]
transition on IDENTIFIER to state [10]

-------------------
lalr_state [15]: {
  [MethodDeclaration ::= PUBLIC Type Identifier LPAREN FormalDeclarationList (*) RPAREN LCURLY BlockStatements RETURN Expression SEMICOLON RCURLY , {EOF }]
}
transition on RPAREN to state [16]

-------------------
lalr_state [16]: {
  [MethodDeclaration ::= PUBLIC Type Identifier LPAREN FormalDeclarationList RPAREN (*) LCURLY BlockStatements RETURN Expression SEMICOLON RCURLY , {EOF }]
}
transition on LCURLY to state [17]

-------------------
lalr_state [17]: {
  [Statement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY RETURN IF WHILE LCURLY IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY RETURN IF WHILE LCURLY IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [BlockStatements ::= (*) Statement , {RETURN }]
  [Statement ::= (*) DISPLAY LPAREN Expression RPAREN SEMICOLON , {DISPLAY RETURN IF WHILE LCURLY IDENTIFIER }]
  [Statement ::= (*) LCURLY BlockStatements RCURLY , {DISPLAY RETURN IF WHILE LCURLY IDENTIFIER }]
  [MethodDeclaration ::= PUBLIC Type Identifier LPAREN FormalDeclarationList RPAREN LCURLY (*) BlockStatements RETURN Expression SEMICOLON RCURLY , {EOF }]
  [Statement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY RETURN IF WHILE LCURLY IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY RETURN IF WHILE LCURLY IDENTIFIER }]
  [Statement ::= (*) LCURLY RCURLY , {DISPLAY RETURN IF WHILE LCURLY IDENTIFIER }]
  [BlockStatements ::= (*) Statement BlockStatements , {RETURN }]
}
transition on Identifier to state [24]
transition on BlockStatements to state [23]
transition on IF to state [22]
transition on WHILE to state [21]
transition on IDENTIFIER to state [10]
transition on DISPLAY to state [20]
transition on LCURLY to state [19]
transition on Statement to state [18]

-------------------
lalr_state [18]: {
  [Statement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY RETURN IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY RETURN IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [BlockStatements ::= Statement (*) , {RETURN RCURLY }]
  [BlockStatements ::= (*) Statement , {RETURN RCURLY }]
  [Statement ::= (*) DISPLAY LPAREN Expression RPAREN SEMICOLON , {DISPLAY RETURN IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) LCURLY BlockStatements RCURLY , {DISPLAY RETURN IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY RETURN IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY RETURN IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) LCURLY RCURLY , {DISPLAY RETURN IF WHILE LCURLY RCURLY IDENTIFIER }]
  [BlockStatements ::= Statement (*) BlockStatements , {RETURN RCURLY }]
  [BlockStatements ::= (*) Statement BlockStatements , {RETURN RCURLY }]
}
transition on Identifier to state [24]
transition on BlockStatements to state [95]
transition on IF to state [22]
transition on WHILE to state [21]
transition on IDENTIFIER to state [10]
transition on DISPLAY to state [20]
transition on LCURLY to state [19]
transition on Statement to state [18]

-------------------
lalr_state [19]: {
  [Statement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [BlockStatements ::= (*) Statement , {RCURLY }]
  [Statement ::= (*) DISPLAY LPAREN Expression RPAREN SEMICOLON , {DISPLAY IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= LCURLY (*) BlockStatements RCURLY , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) LCURLY BlockStatements RCURLY , {DISPLAY IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY IF WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= LCURLY (*) RCURLY , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) LCURLY RCURLY , {DISPLAY IF WHILE LCURLY RCURLY IDENTIFIER }]
  [BlockStatements ::= (*) Statement BlockStatements , {RCURLY }]
}
transition on LCURLY to state [19]
transition on IDENTIFIER to state [10]
transition on RCURLY to state [93]
transition on Statement to state [18]
transition on BlockStatements to state [92]
transition on IF to state [22]
transition on Identifier to state [24]
transition on DISPLAY to state [20]
transition on WHILE to state [21]

-------------------
lalr_state [20]: {
  [Statement ::= DISPLAY (*) LPAREN Expression RPAREN SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on LPAREN to state [88]

-------------------
lalr_state [21]: {
  [Statement ::= WHILE (*) LPAREN Expression RPAREN Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on LPAREN to state [84]

-------------------
lalr_state [22]: {
  [Statement ::= IF (*) LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on LPAREN to state [78]

-------------------
lalr_state [23]: {
  [MethodDeclaration ::= PUBLIC Type Identifier LPAREN FormalDeclarationList RPAREN LCURLY BlockStatements (*) RETURN Expression SEMICOLON RCURLY , {EOF }]
}
transition on RETURN to state [74]

-------------------
lalr_state [24]: {
  [Statement ::= Identifier (*) LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= Identifier (*) BECOMES Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on LBRACKET to state [26]
transition on BECOMES to state [25]

-------------------
lalr_state [25]: {
  [Statement ::= Identifier BECOMES (*) Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [72]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [26]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Statement ::= Identifier LBRACKET (*) Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [29]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [27]: {
  [Expression ::= NEW (*) Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= NEW (*) INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
}
transition on Identifier to state [66]
transition on INTEGER_TYPE to state [65]
transition on IDENTIFIER to state [10]

-------------------
lalr_state [28]: {
  [Expression ::= TRUE (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [29]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Statement ::= Identifier LBRACKET Expression (*) RBRACKET BECOMES Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on RBRACKET to state [61]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [30]: {
  [Expression ::= FALSE (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [31]: {
  [Expression ::= THIS (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [32]: {
  [Expression ::= IDENTIFIER (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [33]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= LPAREN (*) Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [59]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [34]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= LOGICAL_NOT (*) Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [36]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [35]: {
  [Expression ::= INTEGER_LITERAL (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [36]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= LOGICAL_NOT Expression (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [37]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression LOGICAL_AND (*) Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [58]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [38]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression PLUS (*) Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [57]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [39]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression MINUS (*) Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [56]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [40]: {
  [Expression ::= Expression LESSTHAN (*) Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [55]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [41]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression LBRACKET (*) Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [53]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [42]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression MULTIPLY (*) Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [52]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [43]: {
  [Expression ::= Expression DOT (*) Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Identifier ::= (*) IDENTIFIER , {LPAREN }]
  [Expression ::= Expression DOT (*) LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on Identifier to state [45]
transition on IDENTIFIER to state [10]
transition on LENGTH to state [44]

-------------------
lalr_state [44]: {
  [Expression ::= Expression DOT LENGTH (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [45]: {
  [Expression ::= Expression DOT Identifier (*) LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on LPAREN to state [46]

-------------------
lalr_state [46]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [ExpressionList ::= (*) Expression COMMA ExpressionList , {RPAREN }]
  [Expression ::= Expression DOT Identifier LPAREN (*) ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [ExpressionList ::= (*) , {RPAREN }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [ExpressionList ::= (*) Expression , {RPAREN }]
}
transition on INTEGER_LITERAL to state [35]
transition on LPAREN to state [33]
transition on LOGICAL_NOT to state [34]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [48]
transition on TRUE to state [28]
transition on NEW to state [27]
transition on ExpressionList to state [47]

-------------------
lalr_state [47]: {
  [Expression ::= Expression DOT Identifier LPAREN ExpressionList (*) RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on RPAREN to state [51]

-------------------
lalr_state [48]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [ExpressionList ::= Expression (*) , {RPAREN }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [ExpressionList ::= Expression (*) COMMA ExpressionList , {RPAREN }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]
transition on COMMA to state [49]

-------------------
lalr_state [49]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [ExpressionList ::= Expression COMMA (*) ExpressionList , {RPAREN }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [ExpressionList ::= (*) Expression COMMA ExpressionList , {RPAREN }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [ExpressionList ::= (*) , {RPAREN }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT COMMA }]
  [ExpressionList ::= (*) Expression , {RPAREN }]
}
transition on INTEGER_LITERAL to state [35]
transition on LPAREN to state [33]
transition on LOGICAL_NOT to state [34]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [48]
transition on TRUE to state [28]
transition on NEW to state [27]
transition on ExpressionList to state [50]

-------------------
lalr_state [50]: {
  [ExpressionList ::= Expression COMMA ExpressionList (*) , {RPAREN }]
}

-------------------
lalr_state [51]: {
  [Expression ::= Expression DOT Identifier LPAREN ExpressionList RPAREN (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [52]: {
  [Expression ::= Expression MULTIPLY Expression (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [53]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression LBRACKET Expression (*) RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on RBRACKET to state [54]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [54]: {
  [Expression ::= Expression LBRACKET Expression RBRACKET (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [55]: {
  [Expression ::= Expression LESSTHAN Expression (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [56]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression MINUS Expression (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [57]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression PLUS Expression (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [58]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression LOGICAL_AND Expression (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [59]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= LPAREN Expression (*) RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]
transition on RPAREN to state [60]

-------------------
lalr_state [60]: {
  [Expression ::= LPAREN Expression RPAREN (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [61]: {
  [Statement ::= Identifier LBRACKET Expression RBRACKET (*) BECOMES Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on BECOMES to state [62]

-------------------
lalr_state [62]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Statement ::= Identifier LBRACKET Expression RBRACKET BECOMES (*) Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [63]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [63]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Statement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression (*) SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on SEMICOLON to state [64]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [64]: {
  [Statement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON (*) , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}

-------------------
lalr_state [65]: {
  [Expression ::= NEW INTEGER_TYPE (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on LBRACKET to state [69]

-------------------
lalr_state [66]: {
  [Expression ::= NEW Identifier (*) LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on LPAREN to state [67]

-------------------
lalr_state [67]: {
  [Expression ::= NEW Identifier LPAREN (*) RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on RPAREN to state [68]

-------------------
lalr_state [68]: {
  [Expression ::= NEW Identifier LPAREN RPAREN (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [69]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= NEW INTEGER_TYPE LBRACKET (*) Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [70]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [70]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET RBRACKET DOT }]
  [Expression ::= NEW INTEGER_TYPE LBRACKET Expression (*) RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on RBRACKET to state [71]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [71]: {
  [Expression ::= NEW INTEGER_TYPE LBRACKET Expression RBRACKET (*) , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET RBRACKET SEMICOLON DOT COMMA }]
}

-------------------
lalr_state [72]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Statement ::= Identifier BECOMES Expression (*) SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]
transition on SEMICOLON to state [73]

-------------------
lalr_state [73]: {
  [Statement ::= Identifier BECOMES Expression SEMICOLON (*) , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}

-------------------
lalr_state [74]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [MethodDeclaration ::= PUBLIC Type Identifier LPAREN FormalDeclarationList RPAREN LCURLY BlockStatements RETURN (*) Expression SEMICOLON RCURLY , {EOF }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [75]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [75]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [MethodDeclaration ::= PUBLIC Type Identifier LPAREN FormalDeclarationList RPAREN LCURLY BlockStatements RETURN Expression (*) SEMICOLON RCURLY , {EOF }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND LBRACKET SEMICOLON DOT }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on SEMICOLON to state [76]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [76]: {
  [MethodDeclaration ::= PUBLIC Type Identifier LPAREN FormalDeclarationList RPAREN LCURLY BlockStatements RETURN Expression SEMICOLON (*) RCURLY , {EOF }]
}
transition on RCURLY to state [77]

-------------------
lalr_state [77]: {
  [MethodDeclaration ::= PUBLIC Type Identifier LPAREN FormalDeclarationList RPAREN LCURLY BlockStatements RETURN Expression SEMICOLON RCURLY (*) , {EOF }]
}

-------------------
lalr_state [78]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Statement ::= IF LPAREN (*) Expression RPAREN Statement ELSE Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [79]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [79]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Statement ::= IF LPAREN Expression (*) RPAREN Statement ELSE Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on LOGICAL_AND to state [37]
transition on RPAREN to state [80]

-------------------
lalr_state [80]: {
  [Statement ::= (*) Identifier BECOMES Expression SEMICOLON , {ELSE }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {ELSE }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) DISPLAY LPAREN Expression RPAREN SEMICOLON , {ELSE }]
  [Statement ::= (*) LCURLY BlockStatements RCURLY , {ELSE }]
  [Statement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {ELSE }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {ELSE }]
  [Statement ::= (*) LCURLY RCURLY , {ELSE }]
  [Statement ::= IF LPAREN Expression RPAREN (*) Statement ELSE Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on Identifier to state [24]
transition on IF to state [22]
transition on WHILE to state [21]
transition on IDENTIFIER to state [10]
transition on DISPLAY to state [20]
transition on LCURLY to state [19]
transition on Statement to state [81]

-------------------
lalr_state [81]: {
  [Statement ::= IF LPAREN Expression RPAREN Statement (*) ELSE Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on ELSE to state [82]

-------------------
lalr_state [82]: {
  [Statement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) DISPLAY LPAREN Expression RPAREN SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) LCURLY BlockStatements RCURLY , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) LCURLY RCURLY , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= IF LPAREN Expression RPAREN Statement ELSE (*) Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on Identifier to state [24]
transition on IF to state [22]
transition on WHILE to state [21]
transition on IDENTIFIER to state [10]
transition on DISPLAY to state [20]
transition on LCURLY to state [19]
transition on Statement to state [83]

-------------------
lalr_state [83]: {
  [Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement (*) , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}

-------------------
lalr_state [84]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Statement ::= WHILE LPAREN (*) Expression RPAREN Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [85]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [85]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Statement ::= WHILE LPAREN Expression (*) RPAREN Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on RPAREN to state [86]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [86]: {
  [Statement ::= (*) Identifier BECOMES Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) IF LPAREN Expression RPAREN Statement ELSE Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Identifier ::= (*) IDENTIFIER , {BECOMES LBRACKET }]
  [Statement ::= (*) DISPLAY LPAREN Expression RPAREN SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) LCURLY BlockStatements RCURLY , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= WHILE LPAREN Expression RPAREN (*) Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) WHILE LPAREN Expression RPAREN Statement , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Statement ::= (*) LCURLY RCURLY , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on Identifier to state [24]
transition on IF to state [22]
transition on WHILE to state [21]
transition on IDENTIFIER to state [10]
transition on DISPLAY to state [20]
transition on LCURLY to state [19]
transition on Statement to state [87]

-------------------
lalr_state [87]: {
  [Statement ::= WHILE LPAREN Expression RPAREN Statement (*) , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}

-------------------
lalr_state [88]: {
  [Expression ::= (*) Expression LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) IDENTIFIER , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) LPAREN Expression RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) TRUE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW Identifier LPAREN RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) THIS , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Statement ::= DISPLAY LPAREN (*) Expression RPAREN SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= (*) Expression LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) FALSE , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) LOGICAL_NOT Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) Expression MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) INTEGER_LITERAL , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= (*) NEW INTEGER_TYPE LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
}
transition on INTEGER_LITERAL to state [35]
transition on LOGICAL_NOT to state [34]
transition on LPAREN to state [33]
transition on IDENTIFIER to state [32]
transition on THIS to state [31]
transition on FALSE to state [30]
transition on Expression to state [89]
transition on TRUE to state [28]
transition on NEW to state [27]

-------------------
lalr_state [89]: {
  [Expression ::= Expression (*) DOT Identifier LPAREN ExpressionList RPAREN , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MULTIPLY Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LESSTHAN Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Statement ::= DISPLAY LPAREN Expression (*) RPAREN SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
  [Expression ::= Expression (*) DOT LENGTH , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) MINUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LOGICAL_AND Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) LBRACKET Expression RBRACKET , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
  [Expression ::= Expression (*) PLUS Expression , {MULTIPLY PLUS MINUS LESSTHAN LOGICAL_AND RPAREN LBRACKET DOT }]
}
transition on DOT to state [43]
transition on MULTIPLY to state [42]
transition on LBRACKET to state [41]
transition on LESSTHAN to state [40]
transition on MINUS to state [39]
transition on PLUS to state [38]
transition on RPAREN to state [90]
transition on LOGICAL_AND to state [37]

-------------------
lalr_state [90]: {
  [Statement ::= DISPLAY LPAREN Expression RPAREN (*) SEMICOLON , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on SEMICOLON to state [91]

-------------------
lalr_state [91]: {
  [Statement ::= DISPLAY LPAREN Expression RPAREN SEMICOLON (*) , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}

-------------------
lalr_state [92]: {
  [Statement ::= LCURLY BlockStatements (*) RCURLY , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}
transition on RCURLY to state [94]

-------------------
lalr_state [93]: {
  [Statement ::= LCURLY RCURLY (*) , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}

-------------------
lalr_state [94]: {
  [Statement ::= LCURLY BlockStatements RCURLY (*) , {DISPLAY RETURN IF ELSE WHILE LCURLY RCURLY IDENTIFIER }]
}

-------------------
lalr_state [95]: {
  [BlockStatements ::= Statement BlockStatements (*) , {RETURN RCURLY }]
}

-------------------
lalr_state [96]: {
  [FormalDeclaration ::= Type Identifier (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [97]: {
  [FormalDeclarationList ::= (*) FormalDeclaration , {RPAREN }]
  [Type ::= (*) IDENTIFIER , {IDENTIFIER }]
  [Type ::= (*) INTEGER_TYPE LBRACKET RBRACKET , {IDENTIFIER }]
  [FormalDeclaration ::= (*) Type Identifier , {RPAREN COMMA }]
  [FormalDeclarationList ::= (*) , {RPAREN }]
  [Type ::= (*) INTEGER_TYPE , {IDENTIFIER }]
  [FormalDeclarationList ::= FormalDeclaration COMMA (*) FormalDeclarationList , {RPAREN }]
  [FormalDeclarationList ::= (*) FormalDeclaration COMMA FormalDeclarationList , {RPAREN }]
  [Type ::= (*) BOOLEAN_TYPE , {IDENTIFIER }]
}
transition on BOOLEAN_TYPE to state [7]
transition on IDENTIFIER to state [6]
transition on INTEGER_TYPE to state [5]
transition on FormalDeclarationList to state [98]
transition on Type to state [14]
transition on FormalDeclaration to state [13]

-------------------
lalr_state [98]: {
  [FormalDeclarationList ::= FormalDeclaration COMMA FormalDeclarationList (*) , {RPAREN }]
}

-------------------
lalr_state [99]: {
  [$START ::= Program EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 4:SHIFT(to state 3)]
From state #1
 [term 0:SHIFT(to state 99)]
From state #2
 [term 0:REDUCE(with prod 0)]
From state #3
 [term 34:SHIFT(to state 5)] [term 35:SHIFT(to state 7)]
 [term 37:SHIFT(to state 6)]
From state #4
 [term 37:SHIFT(to state 10)]
From state #5
 [term 27:SHIFT(to state 8)] [term 37:REDUCE(with prod 4)]
From state #6
 [term 37:REDUCE(with prod 5)]
From state #7
 [term 37:REDUCE(with prod 3)]
From state #8
 [term 28:SHIFT(to state 9)]
From state #9
 [term 37:REDUCE(with prod 2)]
From state #10
 [term 24:REDUCE(with prod 14)] [term 25:REDUCE(with prod 14)]
 [term 26:REDUCE(with prod 14)] [term 27:REDUCE(with prod 14)]
 [term 33:REDUCE(with prod 14)]
From state #11
 [term 25:SHIFT(to state 12)]
From state #12
 [term 26:REDUCE(with prod 7)] [term 34:SHIFT(to state 5)]
 [term 35:SHIFT(to state 7)] [term 37:SHIFT(to state 6)]
From state #13
 [term 26:REDUCE(with prod 8)] [term 33:SHIFT(to state 97)]
From state #14
 [term 37:SHIFT(to state 10)]
From state #15
 [term 26:SHIFT(to state 16)]
From state #16
 [term 29:SHIFT(to state 17)]
From state #17
 [term 2:SHIFT(to state 20)] [term 10:SHIFT(to state 22)]
 [term 14:SHIFT(to state 21)] [term 29:SHIFT(to state 19)]
 [term 37:SHIFT(to state 10)]
From state #18
 [term 2:SHIFT(to state 20)] [term 8:REDUCE(with prod 22)]
 [term 10:SHIFT(to state 22)] [term 14:SHIFT(to state 21)]
 [term 29:SHIFT(to state 19)] [term 30:REDUCE(with prod 22)]
 [term 37:SHIFT(to state 10)]
From state #19
 [term 2:SHIFT(to state 20)] [term 10:SHIFT(to state 22)]
 [term 14:SHIFT(to state 21)] [term 29:SHIFT(to state 19)]
 [term 30:SHIFT(to state 93)] [term 37:SHIFT(to state 10)]
From state #20
 [term 25:SHIFT(to state 88)]
From state #21
 [term 25:SHIFT(to state 84)]
From state #22
 [term 25:SHIFT(to state 78)]
From state #23
 [term 8:SHIFT(to state 74)]
From state #24
 [term 24:SHIFT(to state 25)] [term 27:SHIFT(to state 26)]
From state #25
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #26
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #27
 [term 34:SHIFT(to state 65)] [term 37:SHIFT(to state 10)]
From state #28
 [term 18:REDUCE(with prod 33)] [term 19:REDUCE(with prod 33)]
 [term 20:REDUCE(with prod 33)] [term 21:REDUCE(with prod 33)]
 [term 22:REDUCE(with prod 33)] [term 26:REDUCE(with prod 33)]
 [term 27:REDUCE(with prod 33)] [term 28:REDUCE(with prod 33)]
 [term 31:REDUCE(with prod 33)] [term 32:REDUCE(with prod 33)]
 [term 33:REDUCE(with prod 33)]
From state #29
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 27:SHIFT(to state 41)]
 [term 28:SHIFT(to state 61)] [term 32:SHIFT(to state 43)]
From state #30
 [term 18:REDUCE(with prod 34)] [term 19:REDUCE(with prod 34)]
 [term 20:REDUCE(with prod 34)] [term 21:REDUCE(with prod 34)]
 [term 22:REDUCE(with prod 34)] [term 26:REDUCE(with prod 34)]
 [term 27:REDUCE(with prod 34)] [term 28:REDUCE(with prod 34)]
 [term 31:REDUCE(with prod 34)] [term 32:REDUCE(with prod 34)]
 [term 33:REDUCE(with prod 34)]
From state #31
 [term 18:REDUCE(with prod 36)] [term 19:REDUCE(with prod 36)]
 [term 20:REDUCE(with prod 36)] [term 21:REDUCE(with prod 36)]
 [term 22:REDUCE(with prod 36)] [term 26:REDUCE(with prod 36)]
 [term 27:REDUCE(with prod 36)] [term 28:REDUCE(with prod 36)]
 [term 31:REDUCE(with prod 36)] [term 32:REDUCE(with prod 36)]
 [term 33:REDUCE(with prod 36)]
From state #32
 [term 18:REDUCE(with prod 35)] [term 19:REDUCE(with prod 35)]
 [term 20:REDUCE(with prod 35)] [term 21:REDUCE(with prod 35)]
 [term 22:REDUCE(with prod 35)] [term 26:REDUCE(with prod 35)]
 [term 27:REDUCE(with prod 35)] [term 28:REDUCE(with prod 35)]
 [term 31:REDUCE(with prod 35)] [term 32:REDUCE(with prod 35)]
 [term 33:REDUCE(with prod 35)]
From state #33
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #34
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #35
 [term 18:REDUCE(with prod 32)] [term 19:REDUCE(with prod 32)]
 [term 20:REDUCE(with prod 32)] [term 21:REDUCE(with prod 32)]
 [term 22:REDUCE(with prod 32)] [term 26:REDUCE(with prod 32)]
 [term 27:REDUCE(with prod 32)] [term 28:REDUCE(with prod 32)]
 [term 31:REDUCE(with prod 32)] [term 32:REDUCE(with prod 32)]
 [term 33:REDUCE(with prod 32)]
From state #36
 [term 18:SHIFT(to state 42)] [term 19:REDUCE(with prod 39)]
 [term 20:REDUCE(with prod 39)] [term 21:REDUCE(with prod 39)]
 [term 22:REDUCE(with prod 39)] [term 26:REDUCE(with prod 39)]
 [term 27:SHIFT(to state 41)] [term 28:REDUCE(with prod 39)]
 [term 31:REDUCE(with prod 39)] [term 32:SHIFT(to state 43)]
 [term 33:REDUCE(with prod 39)]
From state #37
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #38
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #39
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #40
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #41
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #42
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #43
 [term 17:SHIFT(to state 44)] [term 37:SHIFT(to state 10)]
From state #44
 [term 18:REDUCE(with prod 30)] [term 19:REDUCE(with prod 30)]
 [term 20:REDUCE(with prod 30)] [term 21:REDUCE(with prod 30)]
 [term 22:REDUCE(with prod 30)] [term 26:REDUCE(with prod 30)]
 [term 27:REDUCE(with prod 30)] [term 28:REDUCE(with prod 30)]
 [term 31:REDUCE(with prod 30)] [term 32:REDUCE(with prod 30)]
 [term 33:REDUCE(with prod 30)]
From state #45
 [term 25:SHIFT(to state 46)]
From state #46
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 26:REDUCE(with prod 41)] [term 37:SHIFT(to state 32)]
 [term 38:SHIFT(to state 35)]
From state #47
 [term 26:SHIFT(to state 51)]
From state #48
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 26:REDUCE(with prod 42)]
 [term 27:SHIFT(to state 41)] [term 32:SHIFT(to state 43)]
 [term 33:SHIFT(to state 49)]
From state #49
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 26:REDUCE(with prod 41)] [term 37:SHIFT(to state 32)]
 [term 38:SHIFT(to state 35)]
From state #50
 [term 26:REDUCE(with prod 43)]
From state #51
 [term 18:REDUCE(with prod 31)] [term 19:REDUCE(with prod 31)]
 [term 20:REDUCE(with prod 31)] [term 21:REDUCE(with prod 31)]
 [term 22:REDUCE(with prod 31)] [term 26:REDUCE(with prod 31)]
 [term 27:REDUCE(with prod 31)] [term 28:REDUCE(with prod 31)]
 [term 31:REDUCE(with prod 31)] [term 32:REDUCE(with prod 31)]
 [term 33:REDUCE(with prod 31)]
From state #52
 [term 18:REDUCE(with prod 28)] [term 19:REDUCE(with prod 28)]
 [term 20:REDUCE(with prod 28)] [term 21:REDUCE(with prod 28)]
 [term 22:REDUCE(with prod 28)] [term 26:REDUCE(with prod 28)]
 [term 27:REDUCE(with prod 28)] [term 28:REDUCE(with prod 28)]
 [term 31:REDUCE(with prod 28)] [term 32:REDUCE(with prod 28)]
 [term 33:REDUCE(with prod 28)]
From state #53
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 27:SHIFT(to state 41)]
 [term 28:SHIFT(to state 54)] [term 32:SHIFT(to state 43)]
From state #54
 [term 18:REDUCE(with prod 29)] [term 19:REDUCE(with prod 29)]
 [term 20:REDUCE(with prod 29)] [term 21:REDUCE(with prod 29)]
 [term 22:REDUCE(with prod 29)] [term 26:REDUCE(with prod 29)]
 [term 27:REDUCE(with prod 29)] [term 28:REDUCE(with prod 29)]
 [term 31:REDUCE(with prod 29)] [term 32:REDUCE(with prod 29)]
 [term 33:REDUCE(with prod 29)]
From state #55
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:NONASSOC]
 [term 22:SHIFT(to state 37)] [term 26:REDUCE(with prod 25)]
 [term 27:SHIFT(to state 41)] [term 28:REDUCE(with prod 25)]
 [term 31:REDUCE(with prod 25)] [term 32:SHIFT(to state 43)]
 [term 33:REDUCE(with prod 25)]
From state #56
 [term 18:SHIFT(to state 42)] [term 19:REDUCE(with prod 27)]
 [term 20:REDUCE(with prod 27)] [term 21:REDUCE(with prod 27)]
 [term 22:REDUCE(with prod 27)] [term 26:REDUCE(with prod 27)]
 [term 27:SHIFT(to state 41)] [term 28:REDUCE(with prod 27)]
 [term 31:REDUCE(with prod 27)] [term 32:SHIFT(to state 43)]
 [term 33:REDUCE(with prod 27)]
From state #57
 [term 18:SHIFT(to state 42)] [term 19:REDUCE(with prod 26)]
 [term 20:SHIFT(to state 39)] [term 21:REDUCE(with prod 26)]
 [term 22:REDUCE(with prod 26)] [term 26:REDUCE(with prod 26)]
 [term 27:SHIFT(to state 41)] [term 28:REDUCE(with prod 26)]
 [term 31:REDUCE(with prod 26)] [term 32:SHIFT(to state 43)]
 [term 33:REDUCE(with prod 26)]
From state #58
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:REDUCE(with prod 24)]
 [term 22:REDUCE(with prod 24)] [term 26:REDUCE(with prod 24)]
 [term 27:SHIFT(to state 41)] [term 28:REDUCE(with prod 24)]
 [term 31:REDUCE(with prod 24)] [term 32:SHIFT(to state 43)]
 [term 33:REDUCE(with prod 24)]
From state #59
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 26:SHIFT(to state 60)]
 [term 27:SHIFT(to state 41)] [term 32:SHIFT(to state 43)]
From state #60
 [term 18:REDUCE(with prod 40)] [term 19:REDUCE(with prod 40)]
 [term 20:REDUCE(with prod 40)] [term 21:REDUCE(with prod 40)]
 [term 22:REDUCE(with prod 40)] [term 26:REDUCE(with prod 40)]
 [term 27:REDUCE(with prod 40)] [term 28:REDUCE(with prod 40)]
 [term 31:REDUCE(with prod 40)] [term 32:REDUCE(with prod 40)]
 [term 33:REDUCE(with prod 40)]
From state #61
 [term 24:SHIFT(to state 62)]
From state #62
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #63
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 27:SHIFT(to state 41)]
 [term 31:SHIFT(to state 64)] [term 32:SHIFT(to state 43)]
From state #64
 [term 2:REDUCE(with prod 21)] [term 8:REDUCE(with prod 21)]
 [term 10:REDUCE(with prod 21)] [term 11:REDUCE(with prod 21)]
 [term 14:REDUCE(with prod 21)] [term 29:REDUCE(with prod 21)]
 [term 30:REDUCE(with prod 21)] [term 37:REDUCE(with prod 21)]
From state #65
 [term 27:SHIFT(to state 69)]
From state #66
 [term 25:SHIFT(to state 67)]
From state #67
 [term 26:SHIFT(to state 68)]
From state #68
 [term 18:REDUCE(with prod 38)] [term 19:REDUCE(with prod 38)]
 [term 20:REDUCE(with prod 38)] [term 21:REDUCE(with prod 38)]
 [term 22:REDUCE(with prod 38)] [term 26:REDUCE(with prod 38)]
 [term 27:REDUCE(with prod 38)] [term 28:REDUCE(with prod 38)]
 [term 31:REDUCE(with prod 38)] [term 32:REDUCE(with prod 38)]
 [term 33:REDUCE(with prod 38)]
From state #69
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #70
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 27:SHIFT(to state 41)]
 [term 28:SHIFT(to state 71)] [term 32:SHIFT(to state 43)]
From state #71
 [term 18:REDUCE(with prod 37)] [term 19:REDUCE(with prod 37)]
 [term 20:REDUCE(with prod 37)] [term 21:REDUCE(with prod 37)]
 [term 22:REDUCE(with prod 37)] [term 26:REDUCE(with prod 37)]
 [term 27:REDUCE(with prod 37)] [term 28:REDUCE(with prod 37)]
 [term 31:REDUCE(with prod 37)] [term 32:REDUCE(with prod 37)]
 [term 33:REDUCE(with prod 37)]
From state #72
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 27:SHIFT(to state 41)]
 [term 31:SHIFT(to state 73)] [term 32:SHIFT(to state 43)]
From state #73
 [term 2:REDUCE(with prod 20)] [term 8:REDUCE(with prod 20)]
 [term 10:REDUCE(with prod 20)] [term 11:REDUCE(with prod 20)]
 [term 14:REDUCE(with prod 20)] [term 29:REDUCE(with prod 20)]
 [term 30:REDUCE(with prod 20)] [term 37:REDUCE(with prod 20)]
From state #74
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #75
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 27:SHIFT(to state 41)]
 [term 31:SHIFT(to state 76)] [term 32:SHIFT(to state 43)]
From state #76
 [term 30:SHIFT(to state 77)]
From state #77
 [term 0:REDUCE(with prod 6)]
From state #78
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #79
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 26:SHIFT(to state 80)]
 [term 27:SHIFT(to state 41)] [term 32:SHIFT(to state 43)]
From state #80
 [term 2:SHIFT(to state 20)] [term 10:SHIFT(to state 22)]
 [term 14:SHIFT(to state 21)] [term 29:SHIFT(to state 19)]
 [term 37:SHIFT(to state 10)]
From state #81
 [term 11:SHIFT(to state 82)]
From state #82
 [term 2:SHIFT(to state 20)] [term 10:SHIFT(to state 22)]
 [term 14:SHIFT(to state 21)] [term 29:SHIFT(to state 19)]
 [term 37:SHIFT(to state 10)]
From state #83
 [term 2:REDUCE(with prod 17)] [term 8:REDUCE(with prod 17)]
 [term 10:REDUCE(with prod 17)] [term 11:REDUCE(with prod 17)]
 [term 14:REDUCE(with prod 17)] [term 29:REDUCE(with prod 17)]
 [term 30:REDUCE(with prod 17)] [term 37:REDUCE(with prod 17)]
From state #84
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #85
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 26:SHIFT(to state 86)]
 [term 27:SHIFT(to state 41)] [term 32:SHIFT(to state 43)]
From state #86
 [term 2:SHIFT(to state 20)] [term 10:SHIFT(to state 22)]
 [term 14:SHIFT(to state 21)] [term 29:SHIFT(to state 19)]
 [term 37:SHIFT(to state 10)]
From state #87
 [term 2:REDUCE(with prod 18)] [term 8:REDUCE(with prod 18)]
 [term 10:REDUCE(with prod 18)] [term 11:REDUCE(with prod 18)]
 [term 14:REDUCE(with prod 18)] [term 29:REDUCE(with prod 18)]
 [term 30:REDUCE(with prod 18)] [term 37:REDUCE(with prod 18)]
From state #88
 [term 7:SHIFT(to state 27)] [term 9:SHIFT(to state 31)]
 [term 12:SHIFT(to state 28)] [term 13:SHIFT(to state 30)]
 [term 23:SHIFT(to state 34)] [term 25:SHIFT(to state 33)]
 [term 37:SHIFT(to state 32)] [term 38:SHIFT(to state 35)]
From state #89
 [term 18:SHIFT(to state 42)] [term 19:SHIFT(to state 38)]
 [term 20:SHIFT(to state 39)] [term 21:SHIFT(to state 40)]
 [term 22:SHIFT(to state 37)] [term 26:SHIFT(to state 90)]
 [term 27:SHIFT(to state 41)] [term 32:SHIFT(to state 43)]
From state #90
 [term 31:SHIFT(to state 91)]
From state #91
 [term 2:REDUCE(with prod 19)] [term 8:REDUCE(with prod 19)]
 [term 10:REDUCE(with prod 19)] [term 11:REDUCE(with prod 19)]
 [term 14:REDUCE(with prod 19)] [term 29:REDUCE(with prod 19)]
 [term 30:REDUCE(with prod 19)] [term 37:REDUCE(with prod 19)]
From state #92
 [term 30:SHIFT(to state 94)]
From state #93
 [term 2:REDUCE(with prod 15)] [term 8:REDUCE(with prod 15)]
 [term 10:REDUCE(with prod 15)] [term 11:REDUCE(with prod 15)]
 [term 14:REDUCE(with prod 15)] [term 29:REDUCE(with prod 15)]
 [term 30:REDUCE(with prod 15)] [term 37:REDUCE(with prod 15)]
From state #94
 [term 2:REDUCE(with prod 16)] [term 8:REDUCE(with prod 16)]
 [term 10:REDUCE(with prod 16)] [term 11:REDUCE(with prod 16)]
 [term 14:REDUCE(with prod 16)] [term 29:REDUCE(with prod 16)]
 [term 30:REDUCE(with prod 16)] [term 37:REDUCE(with prod 16)]
From state #95
 [term 8:REDUCE(with prod 23)] [term 30:REDUCE(with prod 23)]
From state #96
 [term 26:REDUCE(with prod 10)] [term 33:REDUCE(with prod 10)]
From state #97
 [term 26:REDUCE(with prod 7)] [term 34:SHIFT(to state 5)]
 [term 35:SHIFT(to state 7)] [term 37:SHIFT(to state 6)]
From state #98
 [term 26:REDUCE(with prod 9)]
From state #99
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 11->state 2]
From state #1
From state #2
From state #3
 [non term 10->state 4]
From state #4
 [non term 5->state 11]
From state #5
From state #6
From state #7
From state #8
From state #9
From state #10
From state #11
From state #12
 [non term 6->state 13] [non term 7->state 15] [non term 10->state 14]
From state #13
From state #14
 [non term 5->state 96]
From state #15
From state #16
From state #17
 [non term 1->state 18] [non term 2->state 23] [non term 5->state 24]
From state #18
 [non term 1->state 18] [non term 2->state 95] [non term 5->state 24]
From state #19
 [non term 1->state 18] [non term 2->state 92] [non term 5->state 24]
From state #20
From state #21
From state #22
From state #23
From state #24
From state #25
 [non term 3->state 72]
From state #26
 [non term 3->state 29]
From state #27
 [non term 5->state 66]
From state #28
From state #29
From state #30
From state #31
From state #32
From state #33
 [non term 3->state 59]
From state #34
 [non term 3->state 36]
From state #35
From state #36
From state #37
 [non term 3->state 58]
From state #38
 [non term 3->state 57]
From state #39
 [non term 3->state 56]
From state #40
 [non term 3->state 55]
From state #41
 [non term 3->state 53]
From state #42
 [non term 3->state 52]
From state #43
 [non term 5->state 45]
From state #44
From state #45
From state #46
 [non term 3->state 48] [non term 4->state 47]
From state #47
From state #48
From state #49
 [non term 3->state 48] [non term 4->state 50]
From state #50
From state #51
From state #52
From state #53
From state #54
From state #55
From state #56
From state #57
From state #58
From state #59
From state #60
From state #61
From state #62
 [non term 3->state 63]
From state #63
From state #64
From state #65
From state #66
From state #67
From state #68
From state #69
 [non term 3->state 70]
From state #70
From state #71
From state #72
From state #73
From state #74
 [non term 3->state 75]
From state #75
From state #76
From state #77
From state #78
 [non term 3->state 79]
From state #79
From state #80
 [non term 1->state 81] [non term 5->state 24]
From state #81
From state #82
 [non term 1->state 83] [non term 5->state 24]
From state #83
From state #84
 [non term 3->state 85]
From state #85
From state #86
 [non term 1->state 87] [non term 5->state 24]
From state #87
From state #88
 [non term 3->state 89]
From state #89
From state #90
From state #91
From state #92
From state #93
From state #94
From state #95
From state #96
From state #97
 [non term 6->state 13] [non term 7->state 98] [non term 10->state 14]
From state #98
From state #99
-----------------------------
------- CUP v0.11a beta 20060608 Parser Generation Summary -------
  0 errors and 9 warnings
  39 terminals, 12 non-terminals, and 44 productions declared, 
  producing 100 unique parse states.
  6 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.11a beta 20060608)
